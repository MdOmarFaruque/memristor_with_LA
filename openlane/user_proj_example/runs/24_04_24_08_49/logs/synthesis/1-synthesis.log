
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/core_flat_v4.v
Parsing SystemVerilog input from `/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/core_flat_v4.v' to AST representation.
Generating RTLIL representation for module `\core_flat_v4'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/defines.v
Parsing SystemVerilog input from `/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/defines.v' to AST representation.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v
Parsing SystemVerilog input from `/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v' to AST representation.
Generating RTLIL representation for module `\user_proj_example'.
Successfully finished Verilog frontend.

4. Generating Graphviz representation of design.
Writing dot description to `/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/hierarchy.dot'.
Dumping module user_proj_example to page 1.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \user_proj_example

5.2. Analyzing design hierarchy..
Top module:  \user_proj_example
Removed 0 unused modules.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \user_proj_example

7.2. Analyzing design hierarchy..
Top module:  \user_proj_example
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10 in module user_proj_example.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:0$16'.
  Set init value: \h_tag = 1'0

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:0$16'.
Creating decoders for process `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
     1/2: $0\la_data_out[0:0]
     2/2: $0\pulse_count[2:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\user_proj_example.\la_data_out' using process `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
  created $dff cell `$procdff$29' with positive edge clock.
Creating register for signal `\user_proj_example.\h_tag' using process `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\user_proj_example.\pulse_count' using process `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
  created $dff cell `$procdff$31' with positive edge clock.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:0$16'.
Found and cleaned up 2 empty switches in `\user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
Removing empty process `user_proj_example.$proc$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:50$10'.
Cleaned up 2 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module user_proj_example...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.
<suppressed ~3 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 6 unused cells and 19 unused wires.
<suppressed ~10 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$31 ($dff) from module user_proj_example (D = $procmux$24_Y, Q = \pulse_count, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$32 ($sdff) from module user_proj_example (D = $add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15_Y [2:0], Q = \pulse_count).
Adding SRST signal on $procdff$29 ($dff) from module user_proj_example (D = $procmux$18_Y, Q = \la_data_out, rval = 1'0).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell user_proj_example.$add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15 ($add).
Removed top 29 bits (of 32) from port Y of cell user_proj_example.$add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15 ($add).
Removed top 29 bits (of 32) from wire user_proj_example.$add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module user_proj_example:
  creating $macc model for $add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15 ($add).
  creating $alu model for $macc $add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15.
  creating $alu model for $lt$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:57$12 ($lt): new $alu
  creating $alu cell for $lt$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:57$12: $auto$alumacc.cc:485:replace_alu$37
  creating $alu cell for $add$/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/../../verilog/rtl/user_proj_example.v:58$15: $auto$alumacc.cc:485:replace_alu$48
  created 2 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.
<suppressed ~1 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$78e969f2586efcf3a5b0b0440bcca0db83d5cca2\_90_alu for cells of type $alu.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~260 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.
<suppressed ~21 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 4 unused cells and 57 unused wires.
<suppressed ~5 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\user_proj_example' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 39 wires to a netlist network with 13 inputs and 7 outputs.

40.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:             ORNOT cells:        3
ABC RESULTS:                OR cells:        2
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:               XOR cells:        4
ABC RESULTS:        internal signals:       19
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        7
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 31 unused wires.
<suppressed ~1 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \user_proj_example

42.2. Analyzing design hierarchy..
Top module:  \user_proj_example
Removed 0 unused modules.

43. Printing statistics.

=== user_proj_example ===

   Number of wires:                 36
   Number of wire bits:             65
   Number of public wires:          18
   Number of public wire bits:      43
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       6
     $_AND_                          1
     $_DFF_P_                        1
     $_MUX_                          2
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           2
     $_SDFFE_PP0P_                   3
     $_SDFF_PP0_                     1
     $_XNOR_                         1
     $_XOR_                          4
     core_flat_v4                    1

44. Executing CHECK pass (checking for obvious problems).
Checking module user_proj_example...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/post_techmap.dot'.
Dumping module user_proj_example to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_proj_example..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_proj_example.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_proj_example'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_proj_example.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

49. Printing statistics.

=== user_proj_example ===

   Number of wires:                 35
   Number of wire bits:             62
   Number of public wires:          17
   Number of public wire bits:      40
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $_ANDNOT_                       6
     $_AND_                          1
     $_DFF_P_                        1
     $_MUX_                          2
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           2
     $_SDFFE_PP0P_                   3
     $_SDFF_PP0_                     1
     $_XNOR_                         1
     $_XOR_                          4
     core_flat_v4                    1

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/engtech/Desktop/Openlane_v2/memristor_LA/dependencies/pdks/sky130B/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/engtech/Desktop/Openlane_v2/memristor_LA/dependencies/pdks/sky130B/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/engtech/Desktop/Openlane_v2/memristor_LA/dependencies/pdks/sky130B/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/engtech/Desktop/Openlane_v2/memristor_LA/dependencies/pdks/sky130B/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\user_proj_example':
  mapped 5 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

55. Printing statistics.

=== user_proj_example ===

   Number of wires:                 42
   Number of wire bits:             69
   Number of public wires:          17
   Number of public wire bits:      40
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $_ANDNOT_                       6
     $_AND_                          1
     $_MUX_                          9
     $_NOT_                          2
     $_ORNOT_                        3
     $_OR_                           2
     $_XNOR_                         1
     $_XOR_                          4
     core_flat_v4                    1
     sky130_fd_sc_hd__dfxtp_2        5

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\user_proj_example' to `/tmp/yosys-abc-RNeVrR/input.blif'..
Extracted 28 gates and 42 wires to a netlist network with 13 inputs and 6 outputs.

56.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-RNeVrR/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-RNeVrR/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-RNeVrR/input.blif 
ABC: + read_lib -w /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130B_merged" from "/home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /home/engtech/Desktop/Openlane_v2/memristor_LA/openlane/user_proj_example/runs/24_04_24_08_49/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 25000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 25000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     19 ( 21.1 %)   Cap = 10.9 ff (  7.9 %)   Area =      162.66 ( 63.2 %)   Delay =  1261.48 ps  ( 36.8 %)               
ABC: Path  0 --       2 : 0    5 pi                        A =   0.00  Df =  45.4  -25.3 ps  S =  68.7 ps  Cin =  0.0 ff  Cout =  13.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      25 : 2    1 sky130_fd_sc_hd__and2b_2  A =   8.76  Df = 251.3  -42.0 ps  S =  34.2 ps  Cin =  1.6 ff  Cout =   2.4 ff  Cmax = 310.4 ff  G =  143  
ABC: Path  2 --      27 : 5    6 sky130_fd_sc_hd__a311o_2  A =  11.26  Df = 648.3 -288.8 ps  S = 111.8 ps  Cin =  2.3 ff  Cout =  17.9 ff  Cmax = 298.5 ff  G =  753  
ABC: Path  3 --      33 : 5    1 sky130_fd_sc_hd__a311oi_2 A =  15.01  Df =1261.5 -364.8 ps  S = 673.5 ps  Cin =  4.3 ff  Cout =  33.4 ff  Cmax =  84.2 ff  G =  769  
ABC: Start-point = pi1 (\pulse_count [1]).  End-point = po3 ($auto$rtlil.cc:2607:MuxGate$239).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   13/    6  lat =    0  nd =    19  edge =     53  area =162.65  delay = 4.00  lev = 4
ABC: + write_blif /tmp/yosys-abc-RNeVrR/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_1 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        1
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        6
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_proj_example..
Removed 0 unused cells and 53 unused wires.
<suppressed ~2 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module user_proj_example...
Warning: Wire user_proj_example.\la_data_out is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [8] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [7] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [6] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [5] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [4] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [3] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [2] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [1] is used but has no driver.
Warning: Wire user_proj_example.\io_oeb [0] is used but has no driver.
Found and reported 10 problems.

63. Printing statistics.

=== user_proj_example ===

   Number of wires:                 36
   Number of wire bits:             57
   Number of public wires:          18
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     core_flat_v4                    1
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a311o_2        1
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2         1
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2         1
     sky130_fd_sc_hd__conb_1         9
     sky130_fd_sc_hd__dfxtp_2        5
     sky130_fd_sc_hd__inv_2          4
     sky130_fd_sc_hd__mux2_1         2
     sky130_fd_sc_hd__nand2b_2       1

   Area for cell type \core_flat_v4 is unknown!

   Chip area for module '\user_proj_example': 302.790400

64. Executing Verilog backend.
Dumping module `\user_proj_example'.

Warnings: 10 unique messages, 10 total
End of script. Logfile hash: 70079cf941, CPU: user 0.30s system 0.03s, MEM: 27.94 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 2x abc (0 sec), 22% 4x stat (0 sec), ...
